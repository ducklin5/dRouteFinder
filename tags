!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ARDUINO_LIBS	a2part2/client/Makefile	/^ARDUINO_LIBS = SD SPI Adafruit_GFX Adafruit_ILI9341 TouchScreen$/;"	m
ARDUINO_LIBS	client/Makefile	/^ARDUINO_LIBS = SD SPI Adafruit_GFX Adafruit_ILI9341 TouchScreen$/;"	m
ARDUINO_LIBS	client/part2_client_base/Makefile	/^ARDUINO_LIBS = SD SPI Adafruit_GFX Adafruit_ILI9341 TouchScreen$/;"	m
ARDUINO_UA_DIR	a2part2/client/Makefile	/^ARDUINO_UA_DIR = $(HOME)\/arduino-ua$/;"	m
ARDUINO_UA_DIR	client/Makefile	/^ARDUINO_UA_DIR = $(HOME)\/arduino-ua$/;"	m
ARDUINO_UA_DIR	client/part2_client_base/Makefile	/^ARDUINO_UA_DIR = $(HOME)\/arduino-ua$/;"	m
ARD_PORT_0	a2part2/client/Makefile	/^    ARD_PORT_0    = $(shell [ -e $(HOME)\/.arduino_port_0 ] && cat $(HOME)\/.arduino_port_0)$/;"	m
ARD_PORT_0	client/Makefile	/^    ARD_PORT_0    = $(shell [ -e $(HOME)\/.arduino_port_0 ] && cat $(HOME)\/.arduino_port_0)$/;"	m
ARD_PORT_0	client/part2_client_base/Makefile	/^    ARD_PORT_0    = $(shell [ -e $(HOME)\/.arduino_port_0 ] && cat $(HOME)\/.arduino_port_0)$/;"	m
ARD_PORT_1	a2part2/client/Makefile	/^    ARD_PORT_1    = $(shell [ -e $(HOME)\/.arduino_port_1 ] && cat $(HOME)\/.arduino_port_1)$/;"	m
ARD_PORT_1	client/Makefile	/^    ARD_PORT_1    = $(shell [ -e $(HOME)\/.arduino_port_1 ] && cat $(HOME)\/.arduino_port_1)$/;"	m
ARD_PORT_1	client/part2_client_base/Makefile	/^    ARD_PORT_1    = $(shell [ -e $(HOME)\/.arduino_port_1 ] && cat $(HOME)\/.arduino_port_1)$/;"	m
ARD_PORT_LCK_0	a2part2/client/Makefile	/^    ARD_PORT_LCK_0    = $(shell [ -e $(HOME)\/.arduino_port_lck_0 ] && cat $(HOME)\/.arduino_port_lck_0)$/;"	m
ARD_PORT_LCK_0	client/Makefile	/^    ARD_PORT_LCK_0    = $(shell [ -e $(HOME)\/.arduino_port_lck_0 ] && cat $(HOME)\/.arduino_port_lck_0)$/;"	m
ARD_PORT_LCK_0	client/part2_client_base/Makefile	/^    ARD_PORT_LCK_0    = $(shell [ -e $(HOME)\/.arduino_port_lck_0 ] && cat $(HOME)\/.arduino_port_lck_0)$/;"	m
ARD_PORT_LCK_1	a2part2/client/Makefile	/^    ARD_PORT_LCK_1    = $(shell [ -e $(HOME)\/.arduino_port_lck_1 ] && cat $(HOME)\/.arduino_port_lck_1)$/;"	m
ARD_PORT_LCK_1	client/Makefile	/^    ARD_PORT_LCK_1    = $(shell [ -e $(HOME)\/.arduino_port_lck_1 ] && cat $(HOME)\/.arduino_port_lck_1)$/;"	m
ARD_PORT_LCK_1	client/part2_client_base/Makefile	/^    ARD_PORT_LCK_1    = $(shell [ -e $(HOME)\/.arduino_port_lck_1 ] && cat $(HOME)\/.arduino_port_lck_1)$/;"	m
BOARD_TAG	a2part2/client/Makefile	/^BOARD_TAG = mega2560$/;"	m
BOARD_TAG	client/Makefile	/^BOARD_TAG = mega2560$/;"	m
BOARD_TAG	client/part2_client_base/Makefile	/^BOARD_TAG = mega2560$/;"	m
BinaryHeap	a2part2/server/src/heap.h	/^class BinaryHeap {$/;"	c
BinaryHeap	server/src/heap.h	/^class BinaryHeap {$/;"	c
CXX	a2part2/server/Makefile	/^CXX=g++$/;"	m
CXX	server/Makefile	/^CXX=g++$/;"	m
CXXFLAGS	a2part2/server/Makefile	/^CXXFLAGS=-Wall -std=c++11$/;"	m
CXXFLAGS	server/Makefile	/^CXXFLAGS=-Wall -std=c++11$/;"	m
Digraph	a2part2/server/src/digraph.h	/^class Digraph {$/;"	c
Digraph	server/src/digraph.h	/^class Digraph {$/;"	c
E	a2part2/client/consts_and_types.h	/^    int32_t E;  \/\/ longitude of SE corner$/;"	m	struct:map_box_t
E	client/consts_and_types.h	/^    int32_t E;  \/\/ longitude of SE corner$/;"	m	struct:map_box_t
E	client/part2_client_base/consts_and_types.h	/^    int32_t E;  \/\/ longitude of SE corner$/;"	m	struct:map_box_t
EXE	a2part2/server/Makefile	/^EXE = server heapDBG dijkstraDBG$/;"	m
EXE	server/Makefile	/^EXE = server heapDBG dijkstraDBG$/;"	m
Edge	a2part2/server/src/dijkstra.cpp	/^	Edge(int b, int e){$/;"	f	struct:Edge
Edge	a2part2/server/src/dijkstra.cpp	/^struct Edge {$/;"	s	file:
Edge	server/src/dijkstra.cpp	/^	Edge(int b, int e){$/;"	f	struct:Edge
Edge	server/src/dijkstra.cpp	/^struct Edge {$/;"	s	file:
N	a2part2/client/consts_and_types.h	/^    int32_t N;  \/\/ lattitude of NW corner$/;"	m	struct:map_box_t
N	client/consts_and_types.h	/^    int32_t N;  \/\/ lattitude of NW corner$/;"	m	struct:map_box_t
N	client/part2_client_base/consts_and_types.h	/^    int32_t N;  \/\/ lattitude of NW corner$/;"	m	struct:map_box_t
OBJ_DIR	a2part2/server/Makefile	/^OBJ_DIR=obj$/;"	m
OBJ_DIR	server/Makefile	/^OBJ_DIR=obj$/;"	m
PLI	a2part2/server/src/dijkstra.h	/^typedef pair<long long, int> PLI;$/;"	t
PLI	server/src/dijkstra.h	/^typedef pair<long long, int> PLI;$/;"	t
Point	a2part2/server/src/server.cpp	/^struct Point {$/;"	s	file:
Point	server/src/server.cpp	/^struct Point {$/;"	s	file:
S	a2part2/client/consts_and_types.h	/^    int32_t S;  \/\/ lattitude of SE corner$/;"	m	struct:map_box_t
S	client/consts_and_types.h	/^    int32_t S;  \/\/ lattitude of SE corner$/;"	m	struct:map_box_t
S	client/part2_client_base/consts_and_types.h	/^    int32_t S;  \/\/ lattitude of SE corner$/;"	m	struct:map_box_t
SRC_DIR	a2part2/server/Makefile	/^SRC_DIR=src$/;"	m
SRC_DIR	server/Makefile	/^SRC_DIR=src$/;"	m
SerialPort	a2part2/server/src/serialport.cpp	/^SerialPort::SerialPort(const char *portName) {$/;"	f	class:SerialPort
SerialPort	a2part2/server/src/serialport.h	/^class SerialPort {$/;"	c
SerialPort	server/src/serialport.cpp	/^SerialPort::SerialPort(const char *portName) {$/;"	f	class:SerialPort
SerialPort	server/src/serialport.h	/^class SerialPort {$/;"	c
USER_LIB_PATH	a2part2/client/Makefile	/^USER_LIB_PATH = $(ARDUINO_UA_DIR)\/libraries$/;"	m
USER_LIB_PATH	client/Makefile	/^USER_LIB_PATH = $(ARDUINO_UA_DIR)\/libraries$/;"	m
USER_LIB_PATH	client/part2_client_base/Makefile	/^USER_LIB_PATH = $(ARDUINO_UA_DIR)\/libraries$/;"	m
W	a2part2/client/consts_and_types.h	/^    int32_t W;  \/\/ longitude of NW corner$/;"	m	struct:map_box_t
W	client/consts_and_types.h	/^    int32_t W;  \/\/ longitude of NW corner$/;"	m	struct:map_box_t
W	client/part2_client_base/consts_and_types.h	/^    int32_t W;  \/\/ longitude of NW corner$/;"	m	struct:map_box_t
WDigraph	a2part2/server/src/wdigraph.h	/^class WDigraph : public Digraph {$/;"	c
WDigraph	server/src/wdigraph.h	/^class WDigraph : public Digraph {$/;"	c
_DIJKSTRA_H_	a2part2/server/src/dijkstra.h	2;"	d
_DIJKSTRA_H_	server/src/dijkstra.h	2;"	d
_GRAPH_H_	a2part2/server/src/digraph.h	2;"	d
_GRAPH_H_	server/src/digraph.h	2;"	d
_HEAP_H_	a2part2/server/src/heap.h	2;"	d
_HEAP_H_	server/src/heap.h	2;"	d
_LCD_IMAGE_H	a2part2/client/lcd_image.h	6;"	d
_LCD_IMAGE_H	client/lcd_image.h	6;"	d
_LCD_IMAGE_H	client/part2_client_base/lcd_image.h	6;"	d
_SERIALPORT_H_	a2part2/server/src/serialport.h	11;"	d
_SERIALPORT_H_	server/src/serialport.h	11;"	d
_WEIGHTED_GRAPH_H_	a2part2/server/src/wdigraph.h	2;"	d
_WEIGHTED_GRAPH_H_	server/src/wdigraph.h	2;"	d
__CONSTS_AND_TYPES_H	a2part2/client/consts_and_types.h	15;"	d
__CONSTS_AND_TYPES_H	client/consts_and_types.h	15;"	d
__CONSTS_AND_TYPES_H	client/part2_client_base/consts_and_types.h	15;"	d
__MAP_DRAWING_H	a2part2/client/map_drawing.h	2;"	d
__MAP_DRAWING_H	client/map_drawing.h	2;"	d
__MAP_DRAWING_H	client/part2_client_base/map_drawing.h	2;"	d
addEdge	a2part2/server/src/digraph.cpp	/^void Digraph::addEdge(int u, int v) {$/;"	f	class:Digraph
addEdge	a2part2/server/src/wdigraph.h	/^  void addEdge(int u, int v, long long w){$/;"	f	class:WDigraph
addEdge	server/src/digraph.cpp	/^void Digraph::addEdge(int u, int v) {$/;"	f	class:Digraph
addEdge	server/src/wdigraph.h	/^  void addEdge(int u, int v, long long w){$/;"	f	class:WDigraph
addVertex	a2part2/server/src/digraph.cpp	/^void Digraph::addVertex(int v) {$/;"	f	class:Digraph
addVertex	server/src/digraph.cpp	/^void Digraph::addVertex(int v) {$/;"	f	class:Digraph
begin	a2part2/server/src/dijkstra.cpp	/^	int begin;$/;"	m	struct:Edge	file:
begin	server/src/dijkstra.cpp	/^	int begin;$/;"	m	struct:Edge	file:
buf_len	a2part2/client/client.cpp	/^uint16_t buf_len = 0;$/;"	v
buf_len	client/client.cpp	/^uint16_t buf_len = 0;$/;"	v
buf_size	a2part2/client/client.cpp	/^const uint16_t buf_size = 256;$/;"	v
buf_size	client/client.cpp	/^const uint16_t buf_size = 256;$/;"	v
buffer	a2part2/client/client.cpp	/^char* buffer = (char *) malloc(buf_size);$/;"	v
buffer	client/client.cpp	/^char* buffer = (char *) malloc(buf_size);$/;"	v
centre_cursor	a2part2/client/map_drawing.cpp	/^void centre_cursor() {$/;"	f
centre_cursor	client/map_drawing.cpp	/^void centre_cursor() {$/;"	f
centre_cursor	client/part2_client_base/map_drawing.cpp	/^void centre_cursor() {$/;"	f
centre_map	a2part2/client/map_drawing.cpp	/^void centre_map() {$/;"	f
centre_map	client/map_drawing.cpp	/^void centre_map() {$/;"	f
centre_map	client/part2_client_base/map_drawing.cpp	/^void centre_map() {$/;"	f
clientpins	a2part2/client/consts_and_types.h	/^namespace clientpins {$/;"	n
clientpins	client/consts_and_types.h	/^namespace clientpins {$/;"	n
clientpins	client/part2_client_base/consts_and_types.h	/^namespace clientpins {$/;"	n
constrain_cursor	a2part2/client/map_drawing.cpp	/^void constrain_cursor() {$/;"	f
constrain_cursor	client/map_drawing.cpp	/^void constrain_cursor() {$/;"	f
constrain_cursor	client/part2_client_base/map_drawing.cpp	/^void constrain_cursor() {$/;"	f
constrain_map	a2part2/client/map_drawing.cpp	/^void constrain_map() {$/;"	f
constrain_map	client/map_drawing.cpp	/^void constrain_map() {$/;"	f
constrain_map	client/part2_client_base/map_drawing.cpp	/^void constrain_map() {$/;"	f
cost	a2part2/server/src/wdigraph.h	/^  unordered_map<int, unordered_map<int, long long>> cost;$/;"	m	class:WDigraph
cost	server/src/wdigraph.h	/^  unordered_map<int, unordered_map<int, long long>> cost;$/;"	m	class:WDigraph
cursor_map	a2part2/client/consts_and_types.h	/^  xy_pos cursor_map;$/;"	m	struct:shared_vars
cursor_map	client/consts_and_types.h	/^  xy_pos cursor_map;$/;"	m	struct:shared_vars
cursor_map	client/part2_client_base/consts_and_types.h	/^  xy_pos cursor_map;$/;"	m	struct:shared_vars
dijkstra	a2part2/server/src/dijkstra.cpp	/^void dijkstra(const WDigraph& graph, int startVertex, unordered_map<int, PLI>& tree) {$/;"	f
dijkstra	server/src/dijkstra.cpp	/^void dijkstra(const WDigraph& graph, int startVertex, unordered_map<int, PLI>& tree) {$/;"	f
dir_guard	a2part2/server/Makefile	/^dir_guard=@mkdir -p #make sure specified directory exists$/;"	m
dir_guard	server/Makefile	/^dir_guard=@mkdir -p #make sure specified directory exists$/;"	m
display_height	a2part2/client/consts_and_types.h	/^  const int16_t display_height = tft_height - msg_height;$/;"	m	namespace:displayconsts
display_height	client/consts_and_types.h	/^  const int16_t display_height = tft_height - msg_height;$/;"	m	namespace:displayconsts
display_height	client/part2_client_base/consts_and_types.h	/^  const int16_t display_height = tft_height - msg_height;$/;"	m	namespace:displayconsts
display_width	a2part2/client/consts_and_types.h	/^  const int16_t display_width = tft_width;$/;"	m	namespace:displayconsts
display_width	client/consts_and_types.h	/^  const int16_t display_width = tft_width;$/;"	m	namespace:displayconsts
display_width	client/part2_client_base/consts_and_types.h	/^  const int16_t display_width = tft_width;$/;"	m	namespace:displayconsts
displayconsts	a2part2/client/consts_and_types.h	/^namespace displayconsts {$/;"	n
displayconsts	client/consts_and_types.h	/^namespace displayconsts {$/;"	n
displayconsts	client/part2_client_base/consts_and_types.h	/^namespace displayconsts {$/;"	n
dot_radius	a2part2/client/consts_and_types.h	/^  const int16_t dot_radius = 3;$/;"	m	namespace:mapdata
dot_radius	client/consts_and_types.h	/^  const int16_t dot_radius = 3;$/;"	m	namespace:mapdata
dot_radius	client/part2_client_base/consts_and_types.h	/^  const int16_t dot_radius = 3;$/;"	m	namespace:mapdata
draw	a2part2/server/src/heap.cpp	/^void BinaryHeap<T,K>::draw(int index, int tabs) const {$/;"	f	class:BinaryHeap
draw	server/src/heap.cpp	/^void BinaryHeap<T,K>::draw(int index, int tabs) const {$/;"	f	class:BinaryHeap
draw_cursor	a2part2/client/map_drawing.cpp	/^void draw_cursor() {$/;"	f
draw_cursor	client/map_drawing.cpp	/^void draw_cursor() {$/;"	f
draw_cursor	client/part2_client_base/map_drawing.cpp	/^void draw_cursor() {$/;"	f
draw_map	a2part2/client/map_drawing.cpp	/^void draw_map() {$/;"	f
draw_map	client/map_drawing.cpp	/^void draw_map() {$/;"	f
draw_map	client/part2_client_base/map_drawing.cpp	/^void draw_map() {$/;"	f
draw_route	a2part2/client/client.cpp	/^void draw_route(){$/;"	f
draw_route	client/client.cpp	/^void draw_route(){$/;"	f
end	a2part2/server/src/dijkstra.cpp	/^	int end;$/;"	m	struct:Edge	file:
end	server/src/dijkstra.cpp	/^	int end;$/;"	m	struct:Edge	file:
endIterator	a2part2/server/src/digraph.cpp	/^unordered_set<int>::const_iterator Digraph::endIterator(int v) const {$/;"	f	class:Digraph
endIterator	server/src/digraph.cpp	/^unordered_set<int>::const_iterator Digraph::endIterator(int v) const {$/;"	f	class:Digraph
erase_cursor	a2part2/client/map_drawing.cpp	/^void erase_cursor() {$/;"	f
erase_cursor	client/map_drawing.cpp	/^void erase_cursor() {$/;"	f
erase_cursor	client/part2_client_base/map_drawing.cpp	/^void erase_cursor() {$/;"	f
fd	a2part2/server/src/serialport.h	/^  int fd;$/;"	m	class:SerialPort
fd	server/src/serialport.h	/^  int fd;$/;"	m	class:SerialPort
file_name	a2part2/client/lcd_image.h	/^  char file_name[50];$/;"	m	struct:__anon3
file_name	client/lcd_image.h	/^  char file_name[50];$/;"	m	struct:__anon2
file_name	client/part2_client_base/lcd_image.h	/^  char file_name[50];$/;"	m	struct:__anon1
fixDown	a2part2/server/src/heap.cpp	/^int BinaryHeap<T,K>::fixDown(int index){$/;"	f	class:BinaryHeap
fixDown	server/src/heap.cpp	/^int BinaryHeap<T,K>::fixDown(int index){$/;"	f	class:BinaryHeap
fixUp	a2part2/server/src/heap.cpp	/^int BinaryHeap<T,K>::fixUp(int index){$/;"	f	class:BinaryHeap
fixUp	server/src/heap.cpp	/^int BinaryHeap<T,K>::fixUp(int index){$/;"	f	class:BinaryHeap
getCost	a2part2/server/src/wdigraph.h	/^  long long getCost(int u, int v) const {$/;"	f	class:WDigraph
getCost	server/src/wdigraph.h	/^  long long getCost(int u, int v) const {$/;"	f	class:WDigraph
getReversePath	a2part2/server/src/server.cpp	/^stack<int> getReversePath ( WDigraph& graph, int startID, int endID){$/;"	f
getReversePath	server/src/server.cpp	/^stack<int> getReversePath ( WDigraph& graph, int startID, int endID){$/;"	f
getRoute	a2part2/client/client.cpp	/^void getRoute(lon_lat_32 start, lon_lat_32 end){$/;"	f
getRoute	client/client.cpp	/^void getRoute(lon_lat_32 start, lon_lat_32 end){$/;"	f
getStartEndID	a2part2/server/src/server.cpp	/^pair<int, int> getStartEndID(unordered_map<int, Point> coordTable, Point startP, Point endP){$/;"	f
getStartEndID	server/src/server.cpp	/^pair<int, int> getStartEndID(unordered_map<int, Point> coordTable, Point startP, Point endP){$/;"	f
get_cursor_lonlat	a2part2/client/map_drawing.cpp	/^lon_lat_32 get_cursor_lonlat() {$/;"	f
get_cursor_lonlat	client/map_drawing.cpp	/^lon_lat_32 get_cursor_lonlat() {$/;"	f
get_cursor_lonlat	client/part2_client_base/map_drawing.cpp	/^lon_lat_32 get_cursor_lonlat() {$/;"	f
get_cursor_screen	a2part2/client/map_drawing.cpp	/^xy_pos get_cursor_screen() {$/;"	f
get_cursor_screen	client/map_drawing.cpp	/^xy_pos get_cursor_screen() {$/;"	f
get_cursor_screen	client/part2_client_base/map_drawing.cpp	/^xy_pos get_cursor_screen() {$/;"	f
heap	a2part2/server/src/heap.h	/^		std::vector< std::pair<T, K> > heap;$/;"	m	class:BinaryHeap
heap	server/src/heap.h	/^		std::vector< std::pair<T, K> > heap;$/;"	m	class:BinaryHeap
initialize_display_values	a2part2/client/map_drawing.cpp	/^void initialize_display_values() {$/;"	f
initialize_display_values	client/map_drawing.cpp	/^void initialize_display_values() {$/;"	f
initialize_display_values	client/part2_client_base/map_drawing.cpp	/^void initialize_display_values() {$/;"	f
insert	a2part2/server/src/heap.cpp	/^void BinaryHeap<T,K>::insert(const T& item, const K& key){$/;"	f	class:BinaryHeap
insert	server/src/heap.cpp	/^void BinaryHeap<T,K>::insert(const T& item, const K& key){$/;"	f	class:BinaryHeap
isAck	a2part2/server/src/server.cpp	/^bool isAck( string line ){$/;"	f
isAck	server/src/server.cpp	/^bool isAck( string line ){$/;"	f
isEdge	a2part2/server/src/digraph.cpp	/^bool Digraph::isEdge(int u, int v) {$/;"	f	class:Digraph
isEdge	server/src/digraph.cpp	/^bool Digraph::isEdge(int u, int v) {$/;"	f	class:Digraph
isPath	a2part2/server/src/digraph.cpp	/^bool Digraph::isPath(vector<int> path) {$/;"	f	class:Digraph
isPath	server/src/digraph.cpp	/^bool Digraph::isPath(vector<int> path) {$/;"	f	class:Digraph
isVertex	a2part2/server/src/digraph.cpp	/^bool Digraph::isVertex(int v) {$/;"	f	class:Digraph
isVertex	server/src/digraph.cpp	/^bool Digraph::isVertex(int v) {$/;"	f	class:Digraph
isWalk	a2part2/server/src/digraph.cpp	/^bool Digraph::isWalk(vector<int> walk) {$/;"	f	class:Digraph
isWalk	server/src/digraph.cpp	/^bool Digraph::isWalk(vector<int> walk) {$/;"	f	class:Digraph
joy_button_pin	a2part2/client/consts_and_types.h	/^  const uint8_t joy_button_pin = 8;$/;"	m	namespace:clientpins
joy_button_pin	client/consts_and_types.h	/^  const uint8_t joy_button_pin = 8;$/;"	m	namespace:clientpins
joy_button_pin	client/part2_client_base/consts_and_types.h	/^  const uint8_t joy_button_pin = 8;$/;"	m	namespace:clientpins
joy_button_pushed	a2part2/client/consts_and_types.h	/^  uint8_t zoom_in_pushed, zoom_out_pushed, joy_button_pushed;$/;"	m	struct:shared_vars
joy_button_pushed	client/consts_and_types.h	/^  uint8_t zoom_in_pushed, zoom_out_pushed, joy_button_pushed;$/;"	m	struct:shared_vars
joy_button_pushed	client/part2_client_base/consts_and_types.h	/^  uint8_t zoom_in_pushed, zoom_out_pushed, joy_button_pushed;$/;"	m	struct:shared_vars
joy_centre	a2part2/client/consts_and_types.h	/^  xy_pos joy_centre;$/;"	m	struct:shared_vars
joy_centre	client/consts_and_types.h	/^  xy_pos joy_centre;$/;"	m	struct:shared_vars
joy_centre	client/part2_client_base/consts_and_types.h	/^  xy_pos joy_centre;$/;"	m	struct:shared_vars
joy_x_pin	a2part2/client/consts_and_types.h	/^  const uint8_t joy_x_pin = A1;$/;"	m	namespace:clientpins
joy_x_pin	client/consts_and_types.h	/^  const uint8_t joy_x_pin = A1;$/;"	m	namespace:clientpins
joy_x_pin	client/part2_client_base/consts_and_types.h	/^  const uint8_t joy_x_pin = A1;$/;"	m	namespace:clientpins
joy_y_pin	a2part2/client/consts_and_types.h	/^  const uint8_t joy_y_pin = A0;$/;"	m	namespace:clientpins
joy_y_pin	client/consts_and_types.h	/^  const uint8_t joy_y_pin = A0;$/;"	m	namespace:clientpins
joy_y_pin	client/part2_client_base/consts_and_types.h	/^  const uint8_t joy_y_pin = A0;$/;"	m	namespace:clientpins
lat	a2part2/client/consts_and_types.h	/^  int32_t lon, lat;$/;"	m	struct:lon_lat_32
lat	a2part2/server/src/server.cpp	/^	long long lat; \/\/ latitude of the point$/;"	m	struct:Point	file:
lat	client/consts_and_types.h	/^  int32_t lon, lat;$/;"	m	struct:lon_lat_32
lat	client/part2_client_base/consts_and_types.h	/^  int32_t lon, lat;$/;"	m	struct:lon_lat_32
lat	server/src/server.cpp	/^	long long lat; \/\/ latitude of the point$/;"	m	struct:Point	file:
latitude_to_y	a2part2/client/map_drawing.cpp	/^int32_t latitude_to_y(int8_t map_num, int32_t map_lat) {$/;"	f
latitude_to_y	client/map_drawing.cpp	/^int32_t latitude_to_y(int8_t map_num, int32_t map_lat) {$/;"	f
latitude_to_y	client/part2_client_base/map_drawing.cpp	/^int32_t latitude_to_y(int8_t map_num, int32_t map_lat) {$/;"	f
lcd_image_draw	a2part2/client/lcd_image.cpp	/^void lcd_image_draw(const lcd_image_t *img, Adafruit_ILI9341 *tft,$/;"	f
lcd_image_draw	client/lcd_image.cpp	/^void lcd_image_draw(const lcd_image_t *img, Adafruit_ILI9341 *tft,$/;"	f
lcd_image_draw	client/part2_client_base/lcd_image.cpp	/^void lcd_image_draw(const lcd_image_t *img, Adafruit_ILI9341 *tft,$/;"	f
lcd_image_t	a2part2/client/lcd_image.h	/^} lcd_image_t;$/;"	t	typeref:struct:__anon3
lcd_image_t	client/lcd_image.h	/^} lcd_image_t;$/;"	t	typeref:struct:__anon2
lcd_image_t	client/part2_client_base/lcd_image.h	/^} lcd_image_t;$/;"	t	typeref:struct:__anon1
lon	a2part2/client/consts_and_types.h	/^  int32_t lon, lat;$/;"	m	struct:lon_lat_32
lon	a2part2/server/src/server.cpp	/^	long long lon; \/\/ longitude of the point$/;"	m	struct:Point	file:
lon	client/consts_and_types.h	/^  int32_t lon, lat;$/;"	m	struct:lon_lat_32
lon	client/part2_client_base/consts_and_types.h	/^  int32_t lon, lat;$/;"	m	struct:lon_lat_32
lon	server/src/server.cpp	/^	long long lon; \/\/ longitude of the point$/;"	m	struct:Point	file:
lon_lat_32	a2part2/client/consts_and_types.h	/^  lon_lat_32(int32_t lon1 = 0, int32_t lat1 = 0) : lon(lon1), lat(lat1) {}$/;"	f	struct:lon_lat_32
lon_lat_32	a2part2/client/consts_and_types.h	/^struct lon_lat_32 {$/;"	s
lon_lat_32	client/consts_and_types.h	/^  lon_lat_32(int32_t lon1 = 0, int32_t lat1 = 0) : lon(lon1), lat(lat1) {}$/;"	f	struct:lon_lat_32
lon_lat_32	client/consts_and_types.h	/^struct lon_lat_32 {$/;"	s
lon_lat_32	client/part2_client_base/consts_and_types.h	/^  lon_lat_32(int32_t lon1 = 0, int32_t lat1 = 0) : lon(lon1), lat(lat1) {}$/;"	f	struct:lon_lat_32
lon_lat_32	client/part2_client_base/consts_and_types.h	/^struct lon_lat_32 {$/;"	s
longitude_to_x	a2part2/client/map_drawing.cpp	/^int32_t longitude_to_x(int8_t map_num, int32_t map_lon) {$/;"	f
longitude_to_x	client/map_drawing.cpp	/^int32_t longitude_to_x(int8_t map_num, int32_t map_lon) {$/;"	f
longitude_to_x	client/part2_client_base/map_drawing.cpp	/^int32_t longitude_to_x(int8_t map_num, int32_t map_lon) {$/;"	f
main	a2part2/client/client.cpp	/^int main() {$/;"	f
main	a2part2/server/src/dijkstra.cpp	/^int main(){$/;"	f
main	a2part2/server/src/heap.cpp	/^int main(){$/;"	f
main	a2part2/server/src/server.cpp	/^int main(int argc, char* argv[]){$/;"	f
main	client/client.cpp	/^int main() {$/;"	f
main	client/part2_client_base/client.cpp	/^int main() {$/;"	f
main	server/src/dijkstra.cpp	/^int main(){$/;"	f
main	server/src/heap.cpp	/^int main(){$/;"	f
main	server/src/server.cpp	/^int main(int argc, char* argv[]){$/;"	f
manhattan	a2part2/server/src/server.cpp	/^long long manhattan(const Point& pt1, const Point& pt2) {$/;"	f
manhattan	server/src/server.cpp	/^long long manhattan(const Point& pt1, const Point& pt2) {$/;"	f
map_box	a2part2/client/consts_and_types.h	/^  const map_box_t map_box[] = {$/;"	m	namespace:mapdata
map_box	client/consts_and_types.h	/^  const map_box_t map_box[] = {$/;"	m	namespace:mapdata
map_box	client/part2_client_base/consts_and_types.h	/^  const map_box_t map_box[] = {$/;"	m	namespace:mapdata
map_box_t	a2part2/client/consts_and_types.h	/^struct map_box_t {$/;"	s
map_box_t	client/consts_and_types.h	/^struct map_box_t {$/;"	s
map_box_t	client/part2_client_base/consts_and_types.h	/^struct map_box_t {$/;"	s
map_coords	a2part2/client/consts_and_types.h	/^  xy_pos map_coords;$/;"	m	struct:shared_vars
map_coords	client/consts_and_types.h	/^  xy_pos map_coords;$/;"	m	struct:shared_vars
map_coords	client/part2_client_base/consts_and_types.h	/^  xy_pos map_coords;$/;"	m	struct:shared_vars
map_number	a2part2/client/consts_and_types.h	/^  int8_t map_number;$/;"	m	struct:shared_vars
map_number	client/consts_and_types.h	/^  int8_t map_number;$/;"	m	struct:shared_vars
map_number	client/part2_client_base/consts_and_types.h	/^  int8_t map_number;$/;"	m	struct:shared_vars
map_tiles	a2part2/client/consts_and_types.h	/^  const lcd_image_t map_tiles[] = {$/;"	m	namespace:mapdata
map_tiles	client/consts_and_types.h	/^  const lcd_image_t map_tiles[] = {$/;"	m	namespace:mapdata
map_tiles	client/part2_client_base/consts_and_types.h	/^  const lcd_image_t map_tiles[] = {$/;"	m	namespace:mapdata
map_x_limit	a2part2/client/consts_and_types.h	/^  const int16_t map_x_limit[6] = { 511, 1023, 2047, 4095, 8191, 16383};$/;"	m	namespace:mapdata
map_x_limit	client/consts_and_types.h	/^  const int16_t map_x_limit[6] = { 511, 1023, 2047, 4095, 8191, 16383};$/;"	m	namespace:mapdata
map_x_limit	client/part2_client_base/consts_and_types.h	/^  const int16_t map_x_limit[6] = { 511, 1023, 2047, 4095, 8191, 16383};$/;"	m	namespace:mapdata
map_y_limit	a2part2/client/consts_and_types.h	/^  const int16_t map_y_limit[6] = { 511, 1023, 2047, 4095, 8191, 16383};$/;"	m	namespace:mapdata
map_y_limit	client/consts_and_types.h	/^  const int16_t map_y_limit[6] = { 511, 1023, 2047, 4095, 8191, 16383};$/;"	m	namespace:mapdata
map_y_limit	client/part2_client_base/consts_and_types.h	/^  const int16_t map_y_limit[6] = { 511, 1023, 2047, 4095, 8191, 16383};$/;"	m	namespace:mapdata
mapdata	a2part2/client/consts_and_types.h	/^namespace mapdata {$/;"	n
mapdata	client/consts_and_types.h	/^namespace mapdata {$/;"	n
mapdata	client/part2_client_base/consts_and_types.h	/^namespace mapdata {$/;"	n
max_waypoints	a2part2/client/consts_and_types.h	/^const int16_t max_waypoints = 500;$/;"	v
max_waypoints	client/consts_and_types.h	/^const int16_t max_waypoints = 500;$/;"	v
max_waypoints	client/part2_client_base/consts_and_types.h	/^const int16_t max_waypoints = 500;$/;"	v
max_x	a2part2/client/consts_and_types.h	/^  const int16_t max_x = display_width - padding;$/;"	m	namespace:displayconsts
max_x	client/consts_and_types.h	/^  const int16_t max_x = display_width - padding;$/;"	m	namespace:displayconsts
max_x	client/part2_client_base/consts_and_types.h	/^  const int16_t max_x = display_width - padding;$/;"	m	namespace:displayconsts
max_y	a2part2/client/consts_and_types.h	/^  const int16_t max_y = display_height - padding;$/;"	m	namespace:displayconsts
max_y	client/consts_and_types.h	/^  const int16_t max_y = display_height - padding;$/;"	m	namespace:displayconsts
max_y	client/part2_client_base/consts_and_types.h	/^  const int16_t max_y = display_height - padding;$/;"	m	namespace:displayconsts
min	a2part2/server/src/heap.cpp	/^pair<T, K> BinaryHeap<T,K>::min() const {$/;"	f	class:BinaryHeap
min	server/src/heap.cpp	/^pair<T, K> BinaryHeap<T,K>::min() const {$/;"	f	class:BinaryHeap
min_x	a2part2/client/consts_and_types.h	/^  const int16_t min_x = padding;$/;"	m	namespace:displayconsts
min_x	client/consts_and_types.h	/^  const int16_t min_x = padding;$/;"	m	namespace:displayconsts
min_x	client/part2_client_base/consts_and_types.h	/^  const int16_t min_x = padding;$/;"	m	namespace:displayconsts
min_y	a2part2/client/consts_and_types.h	/^  const int16_t min_y = padding;$/;"	m	namespace:displayconsts
min_y	client/consts_and_types.h	/^  const int16_t min_y = padding;$/;"	m	namespace:displayconsts
min_y	client/part2_client_base/consts_and_types.h	/^  const int16_t min_y = padding;$/;"	m	namespace:displayconsts
move_cursor	a2part2/client/map_drawing.cpp	/^void move_cursor(const xy_pos& delta) {$/;"	f
move_cursor	client/map_drawing.cpp	/^void move_cursor(const xy_pos& delta) {$/;"	f
move_cursor	client/part2_client_base/map_drawing.cpp	/^void move_cursor(const xy_pos& delta) {$/;"	f
msg_height	a2part2/client/consts_and_types.h	/^  const int16_t msg_height = 24;$/;"	m	namespace:displayconsts
msg_height	client/consts_and_types.h	/^  const int16_t msg_height = 24;$/;"	m	namespace:displayconsts
msg_height	client/part2_client_base/consts_and_types.h	/^  const int16_t msg_height = 24;$/;"	m	namespace:displayconsts
msg_width	a2part2/client/consts_and_types.h	/^  const int16_t msg_width = tft_width;$/;"	m	namespace:displayconsts
msg_width	client/consts_and_types.h	/^  const int16_t msg_width = tft_width;$/;"	m	namespace:displayconsts
msg_width	client/part2_client_base/consts_and_types.h	/^  const int16_t msg_width = tft_width;$/;"	m	namespace:displayconsts
nbrs	a2part2/server/src/digraph.h	/^  unordered_map<int, unordered_set<int>> nbrs;$/;"	m	class:Digraph
nbrs	server/src/digraph.h	/^  unordered_map<int, unordered_set<int>> nbrs;$/;"	m	class:Digraph
ncols	a2part2/client/lcd_image.h	/^  uint16_t ncols;$/;"	m	struct:__anon3
ncols	client/lcd_image.h	/^  uint16_t ncols;$/;"	m	struct:__anon2
ncols	client/part2_client_base/lcd_image.h	/^  uint16_t ncols;$/;"	m	struct:__anon1
neighbours	a2part2/server/src/digraph.cpp	/^unordered_set<int>::const_iterator Digraph::neighbours(int v) const {$/;"	f	class:Digraph
neighbours	server/src/digraph.cpp	/^unordered_set<int>::const_iterator Digraph::neighbours(int v) const {$/;"	f	class:Digraph
newtio	a2part2/server/src/serialport.h	/^  termios oldtio, newtio;$/;"	m	class:SerialPort
newtio	server/src/serialport.h	/^  termios oldtio, newtio;$/;"	m	class:SerialPort
nrows	a2part2/client/lcd_image.h	/^  uint16_t nrows;$/;"	m	struct:__anon3
nrows	client/lcd_image.h	/^  uint16_t nrows;$/;"	m	struct:__anon2
nrows	client/part2_client_base/lcd_image.h	/^  uint16_t nrows;$/;"	m	struct:__anon1
numNeighbours	a2part2/server/src/digraph.cpp	/^int Digraph::numNeighbours(int v) {$/;"	f	class:Digraph
numNeighbours	server/src/digraph.cpp	/^int Digraph::numNeighbours(int v) {$/;"	f	class:Digraph
num_waypoints	a2part2/client/consts_and_types.h	/^  int16_t num_waypoints;$/;"	m	struct:shared_vars
num_waypoints	client/consts_and_types.h	/^  int16_t num_waypoints;$/;"	m	struct:shared_vars
num_waypoints	client/part2_client_base/consts_and_types.h	/^  int16_t num_waypoints;$/;"	m	struct:shared_vars
objects	a2part2/server/Makefile	/^objects = heap.o dijkstra.o digraph.o serialport.o server.o$/;"	m
objects	server/Makefile	/^objects = heap.o dijkstra.o digraph.o serialport.o server.o$/;"	m
oldtio	a2part2/server/src/serialport.h	/^  termios oldtio, newtio;$/;"	m	class:SerialPort
oldtio	server/src/serialport.h	/^  termios oldtio, newtio;$/;"	m	class:SerialPort
operator <<	a2part2/server/src/dijkstra.cpp	/^ostream & operator << (ostream &out, const Edge &e)$/;"	f
operator <<	server/src/dijkstra.cpp	/^ostream & operator << (ostream &out, const Edge &e)$/;"	f
padding	a2part2/client/consts_and_types.h	/^  const int16_t padding = 5;$/;"	m	namespace:displayconsts
padding	client/consts_and_types.h	/^  const int16_t padding = 5;$/;"	m	namespace:displayconsts
padding	client/part2_client_base/consts_and_types.h	/^  const int16_t padding = 5;$/;"	m	namespace:displayconsts
popMin	a2part2/server/src/heap.cpp	/^void BinaryHeap<T,K>::popMin(){$/;"	f	class:BinaryHeap
popMin	server/src/heap.cpp	/^void BinaryHeap<T,K>::popMin(){$/;"	f	class:BinaryHeap
printPath	a2part2/server/src/server.cpp	/^void printPath( unordered_map<int, Point> coordTable, stack<int> reversePath, SerialPort &ios){$/;"	f
printPath	server/src/server.cpp	/^void printPath( unordered_map<int, Point> coordTable, stack<int> reversePath, SerialPort &ios){$/;"	f
printTree	a2part2/server/src/server.cpp	/^void printTree (unordered_map<int,PLI>& tree){$/;"	f
printTree	server/src/server.cpp	/^void printTree (unordered_map<int,PLI>& tree){$/;"	f
process_input	a2part2/client/client.cpp	/^void process_input() {$/;"	f
process_input	client/client.cpp	/^void process_input() {$/;"	f
process_input	client/part2_client_base/client.cpp	/^void process_input() {$/;"	f
readGraph	a2part2/server/src/server.cpp	/^void readGraph(string filename, WDigraph& graph, unordered_map<int, Point>& points) {$/;"	f
readGraph	server/src/server.cpp	/^void readGraph(string filename, WDigraph& graph, unordered_map<int, Point>& points) {$/;"	f
readline	a2part2/server/src/serialport.cpp	/^string SerialPort::readline(int timeout) {$/;"	f	class:SerialPort
readline	server/src/serialport.cpp	/^string SerialPort::readline(int timeout) {$/;"	f	class:SerialPort
redraw_map	a2part2/client/consts_and_types.h	/^  uint8_t redraw_map;$/;"	m	struct:shared_vars
redraw_map	client/consts_and_types.h	/^  uint8_t redraw_map;$/;"	m	struct:shared_vars
redraw_map	client/part2_client_base/consts_and_types.h	/^  uint8_t redraw_map;$/;"	m	struct:shared_vars
sd_cs	a2part2/client/consts_and_types.h	/^  const uint8_t sd_cs = 6;$/;"	m	namespace:clientpins
sd_cs	client/consts_and_types.h	/^  const uint8_t sd_cs = 6;$/;"	m	namespace:clientpins
sd_cs	client/part2_client_base/consts_and_types.h	/^  const uint8_t sd_cs = 6;$/;"	m	namespace:clientpins
setup	a2part2/client/client.cpp	/^void setup() {$/;"	f
setup	client/client.cpp	/^void setup() {$/;"	f
setup	client/part2_client_base/client.cpp	/^void setup() {$/;"	f
shared	a2part2/client/client.cpp	/^shared_vars shared;$/;"	v
shared	client/client.cpp	/^shared_vars shared;$/;"	v
shared	client/part2_client_base/client.cpp	/^shared_vars shared;$/;"	v
shared_vars	a2part2/client/consts_and_types.h	/^struct shared_vars {$/;"	s
shared_vars	client/consts_and_types.h	/^struct shared_vars {$/;"	s
shared_vars	client/part2_client_base/consts_and_types.h	/^struct shared_vars {$/;"	s
shift_map_display	a2part2/client/map_drawing.cpp	/^void shift_map_display(const xy_pos& shift) {$/;"	f
shift_map_display	client/map_drawing.cpp	/^void shift_map_display(const xy_pos& shift) {$/;"	f
shift_map_display	client/part2_client_base/map_drawing.cpp	/^void shift_map_display(const xy_pos& shift) {$/;"	f
size	a2part2/server/src/digraph.cpp	/^int Digraph::size() {$/;"	f	class:Digraph
size	a2part2/server/src/heap.cpp	/^int BinaryHeap<T,K>::size() const{$/;"	f	class:BinaryHeap
size	server/src/digraph.cpp	/^int Digraph::size() {$/;"	f	class:Digraph
size	server/src/heap.cpp	/^int BinaryHeap<T,K>::size() const{$/;"	f	class:BinaryHeap
splitStr	a2part2/client/client.cpp	/^void splitStr(char* &input, char** output, int tCount, const char* delim){$/;"	f
splitStr	client/client.cpp	/^void splitStr(char* &input, char** output, int tCount, const char* delim){$/;"	f
status_message	a2part2/client/map_drawing.cpp	/^void status_message(const char* msg) {$/;"	f
status_message	client/map_drawing.cpp	/^void status_message(const char* msg) {$/;"	f
status_message	client/part2_client_base/map_drawing.cpp	/^void status_message(const char* msg) {$/;"	f
tft	a2part2/client/client.cpp	/^Adafruit_ILI9341 tft = Adafruit_ILI9341(clientpins::tft_cs, clientpins::tft_dc);$/;"	v
tft	a2part2/client/consts_and_types.h	/^  Adafruit_ILI9341* tft;$/;"	m	struct:shared_vars
tft	client/client.cpp	/^Adafruit_ILI9341 tft = Adafruit_ILI9341(clientpins::tft_cs, clientpins::tft_dc);$/;"	v
tft	client/consts_and_types.h	/^  Adafruit_ILI9341* tft;$/;"	m	struct:shared_vars
tft	client/part2_client_base/client.cpp	/^Adafruit_ILI9341 tft = Adafruit_ILI9341(clientpins::tft_cs, clientpins::tft_dc);$/;"	v
tft	client/part2_client_base/consts_and_types.h	/^  Adafruit_ILI9341* tft;$/;"	m	struct:shared_vars
tft_cs	a2part2/client/consts_and_types.h	/^  const uint8_t tft_cs = 10;$/;"	m	namespace:clientpins
tft_cs	client/consts_and_types.h	/^  const uint8_t tft_cs = 10;$/;"	m	namespace:clientpins
tft_cs	client/part2_client_base/consts_and_types.h	/^  const uint8_t tft_cs = 10;$/;"	m	namespace:clientpins
tft_dc	a2part2/client/consts_and_types.h	/^  const uint8_t tft_dc = 9;$/;"	m	namespace:clientpins
tft_dc	client/consts_and_types.h	/^  const uint8_t tft_dc = 9;$/;"	m	namespace:clientpins
tft_dc	client/part2_client_base/consts_and_types.h	/^  const uint8_t tft_dc = 9;$/;"	m	namespace:clientpins
tft_height	a2part2/client/consts_and_types.h	/^  const int16_t tft_height = 240;$/;"	m	namespace:displayconsts
tft_height	client/consts_and_types.h	/^  const int16_t tft_height = 240;$/;"	m	namespace:displayconsts
tft_height	client/part2_client_base/consts_and_types.h	/^  const int16_t tft_height = 240;$/;"	m	namespace:displayconsts
tft_width	a2part2/client/consts_and_types.h	/^  const int16_t tft_width = 320;$/;"	m	namespace:displayconsts
tft_width	client/consts_and_types.h	/^  const int16_t tft_width = 320;$/;"	m	namespace:displayconsts
tft_width	client/part2_client_base/consts_and_types.h	/^  const int16_t tft_width = 320;$/;"	m	namespace:displayconsts
verify	a2part2/client/client.cpp	/^bool verify(const char* input, const char* expected){$/;"	f
verify	client/client.cpp	/^bool verify(const char* input, const char* expected){$/;"	f
vertices	a2part2/server/src/digraph.cpp	/^vector<int> Digraph::vertices() {$/;"	f	class:Digraph
vertices	server/src/digraph.cpp	/^vector<int> Digraph::vertices() {$/;"	f	class:Digraph
wait4Request	a2part2/server/src/server.cpp	/^pair<Point, Point> wait4Request( SerialPort &inSerial){$/;"	f
wait4Request	server/src/server.cpp	/^pair<Point, Point> wait4Request( SerialPort &inSerial){$/;"	f
wait4line	a2part2/client/client.cpp	/^bool wait4line(unsigned long dur){$/;"	f
wait4line	client/client.cpp	/^bool wait4line(unsigned long dur){$/;"	f
waypoints	a2part2/client/consts_and_types.h	/^  lon_lat_32 waypoints[max_waypoints];$/;"	m	struct:shared_vars
waypoints	client/consts_and_types.h	/^  lon_lat_32 waypoints[max_waypoints];$/;"	m	struct:shared_vars
waypoints	client/part2_client_base/consts_and_types.h	/^  lon_lat_32 waypoints[max_waypoints];$/;"	m	struct:shared_vars
writeline	a2part2/server/src/serialport.cpp	/^bool SerialPort::writeline(const string& line) {$/;"	f	class:SerialPort
writeline	server/src/serialport.cpp	/^bool SerialPort::writeline(const string& line) {$/;"	f	class:SerialPort
x	a2part2/client/consts_and_types.h	/^  int16_t x, y;$/;"	m	struct:xy_pos
x	client/consts_and_types.h	/^  int16_t x, y;$/;"	m	struct:xy_pos
x	client/part2_client_base/consts_and_types.h	/^  int16_t x, y;$/;"	m	struct:xy_pos
x_to_longitude	a2part2/client/map_drawing.cpp	/^int32_t x_to_longitude(int8_t map_num, int32_t map_x) {$/;"	f
x_to_longitude	client/map_drawing.cpp	/^int32_t x_to_longitude(int8_t map_num, int32_t map_x) {$/;"	f
x_to_longitude	client/part2_client_base/map_drawing.cpp	/^int32_t x_to_longitude(int8_t map_num, int32_t map_x) {$/;"	f
xy_pos	a2part2/client/consts_and_types.h	/^  xy_pos(int16_t x1 = 0, int16_t y1 = 0) : x(x1), y(y1) {}$/;"	f	struct:xy_pos
xy_pos	a2part2/client/consts_and_types.h	/^struct xy_pos {$/;"	s
xy_pos	client/consts_and_types.h	/^  xy_pos(int16_t x1 = 0, int16_t y1 = 0) : x(x1), y(y1) {}$/;"	f	struct:xy_pos
xy_pos	client/consts_and_types.h	/^struct xy_pos {$/;"	s
xy_pos	client/part2_client_base/consts_and_types.h	/^  xy_pos(int16_t x1 = 0, int16_t y1 = 0) : x(x1), y(y1) {}$/;"	f	struct:xy_pos
xy_pos	client/part2_client_base/consts_and_types.h	/^struct xy_pos {$/;"	s
y	a2part2/client/consts_and_types.h	/^  int16_t x, y;$/;"	m	struct:xy_pos
y	client/consts_and_types.h	/^  int16_t x, y;$/;"	m	struct:xy_pos
y	client/part2_client_base/consts_and_types.h	/^  int16_t x, y;$/;"	m	struct:xy_pos
y_to_latitude	a2part2/client/map_drawing.cpp	/^int32_t y_to_latitude(int8_t map_num, int32_t map_y) {$/;"	f
y_to_latitude	client/map_drawing.cpp	/^int32_t y_to_latitude(int8_t map_num, int32_t map_y) {$/;"	f
y_to_latitude	client/part2_client_base/map_drawing.cpp	/^int32_t y_to_latitude(int8_t map_num, int32_t map_y) {$/;"	f
zoom_in_pin	a2part2/client/consts_and_types.h	/^  const uint8_t zoom_in_pin = 2;$/;"	m	namespace:clientpins
zoom_in_pin	client/consts_and_types.h	/^  const uint8_t zoom_in_pin = 2;$/;"	m	namespace:clientpins
zoom_in_pin	client/part2_client_base/consts_and_types.h	/^  const uint8_t zoom_in_pin = 2;$/;"	m	namespace:clientpins
zoom_in_pushed	a2part2/client/consts_and_types.h	/^  uint8_t zoom_in_pushed, zoom_out_pushed, joy_button_pushed;$/;"	m	struct:shared_vars
zoom_in_pushed	client/consts_and_types.h	/^  uint8_t zoom_in_pushed, zoom_out_pushed, joy_button_pushed;$/;"	m	struct:shared_vars
zoom_in_pushed	client/part2_client_base/consts_and_types.h	/^  uint8_t zoom_in_pushed, zoom_out_pushed, joy_button_pushed;$/;"	m	struct:shared_vars
zoom_map	a2part2/client/map_drawing.cpp	/^void zoom_map(int16_t change) {$/;"	f
zoom_map	client/map_drawing.cpp	/^void zoom_map(int16_t change) {$/;"	f
zoom_map	client/part2_client_base/map_drawing.cpp	/^void zoom_map(int16_t change) {$/;"	f
zoom_out_pin	a2part2/client/consts_and_types.h	/^  const uint8_t zoom_out_pin = 3;$/;"	m	namespace:clientpins
zoom_out_pin	client/consts_and_types.h	/^  const uint8_t zoom_out_pin = 3;$/;"	m	namespace:clientpins
zoom_out_pin	client/part2_client_base/consts_and_types.h	/^  const uint8_t zoom_out_pin = 3;$/;"	m	namespace:clientpins
zoom_out_pushed	a2part2/client/consts_and_types.h	/^  uint8_t zoom_in_pushed, zoom_out_pushed, joy_button_pushed;$/;"	m	struct:shared_vars
zoom_out_pushed	client/consts_and_types.h	/^  uint8_t zoom_in_pushed, zoom_out_pushed, joy_button_pushed;$/;"	m	struct:shared_vars
zoom_out_pushed	client/part2_client_base/consts_and_types.h	/^  uint8_t zoom_in_pushed, zoom_out_pushed, joy_button_pushed;$/;"	m	struct:shared_vars
~SerialPort	a2part2/server/src/serialport.cpp	/^SerialPort::~SerialPort() {$/;"	f	class:SerialPort
~SerialPort	server/src/serialport.cpp	/^SerialPort::~SerialPort() {$/;"	f	class:SerialPort
